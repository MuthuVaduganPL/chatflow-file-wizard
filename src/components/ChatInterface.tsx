import { useState, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { Send, ChevronDown, ChevronRight, Brain, Download, Eye, ArrowRight, CheckCircle } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";

export type ProcessingStep = 'idle' | 'thinking' | 'output-ready' | 'processing-files' | 'complete';

interface ChatInterfaceProps {
  requestId?: string;
  onStepChange: (step: ProcessingStep) => void;
  currentStep: ProcessingStep;
}

export const ChatInterface = ({ requestId, onStepChange, currentStep }: ChatInterfaceProps) => {
  const [input, setInput] = useState("");
  const [isThinkingExpanded, setIsThinkingExpanded] = useState(false);
  const [thinkingText, setThinkingText] = useState("");
  const [outputFile, setOutputFile] = useState<{ name: string; url: string; content: string } | null>(null);
  const [finalFiles, setFinalFiles] = useState<{ textFile: string; markdownFile: { name: string; url: string; content: string } } | null>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const { toast } = useToast();

  const handleSubmit = async () => {
    if (!input.trim() || !requestId) return;
    
    // Start thinking phase
    onStepChange('thinking');
    setIsThinkingExpanded(true);
    
    // Simulate thinking process
    const thinkingSteps = [
      "Analyzing your request...",
      "Processing natural language input...",
      "Identifying key requirements...",
      "Generating optimal solution strategy...",
      "Compiling response data...",
      "Finalizing output format..."
    ];
    
    for (let i = 0; i < thinkingSteps.length; i++) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      setThinkingText(thinkingSteps[i]);
    }
    
    // Simulate output generation
    await new Promise(resolve => setTimeout(resolve, 1500));
    setOutputFile({
      name: "agent_output.txt",
      url: "#",
      content: `Agent Response for Request: ${requestId}

Input: ${input}

Processing Results:
- Analysis completed successfully
- Generated comprehensive solution
- Optimized for user requirements
- Ready for next processing stage

This is the output content that would be generated by the AI agent based on your input.`
    });
    
    onStepChange('output-ready');
    toast({
      title: "Processing Complete",
      description: "Your AI agent has finished processing. Review the output below.",
    });
  };

  const handlePreview = (content: string) => {
    // This would typically communicate with parent to show content in right pane
    toast({
      title: "Preview",
      description: "Content preview loaded in right pane",
    });
  };

  const handleDownload = (filename: string, content: string) => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    a.click();
    URL.revokeObjectURL(url);
    
    toast({
      title: "Download Started",
      description: `${filename} is being downloaded`,
    });
  };

  const handleProceed = async () => {
    onStepChange('processing-files');
    
    // Simulate second API call
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    setFinalFiles({
      textFile: "final_text_output.txt",
      markdownFile: {
        name: "final_markdown_output.md",
        url: "#",
        content: `# Final Processing Results

## Summary
The AI agent has successfully processed your request and generated the following outputs:

### Key Findings
- **Analysis**: Comprehensive input processing completed
- **Generation**: Optimized content created
- **Validation**: All quality checks passed

### Next Steps
1. Review the generated content
2. Download files as needed
3. Proceed with implementation

### Technical Details
\`\`\`
Request ID: ${requestId}
Processing Time: ${new Date().toISOString()}
Status: Complete
\`\`\`

This markdown file contains the structured output from the second processing stage.`
      }
    });
    
    onStepChange('complete');
    toast({
      title: "Processing Chain Complete",
      description: "All files have been generated successfully!",
    });
  };

  const resetWorkflow = () => {
    setInput("");
    setThinkingText("");
    setOutputFile(null);
    setFinalFiles(null);
    setIsThinkingExpanded(false);
    onStepChange('idle');
  };

  return (
    <div className="h-full flex flex-col">
      <div className="p-6 border-b border-border">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-xl font-semibold text-foreground">AI Agent Interface</h2>
            {requestId && (
              <p className="text-sm text-muted-foreground">Request: {requestId}</p>
            )}
          </div>
          <Badge variant="outline" className="text-xs">
            Step: {currentStep.replace('-', ' ').toUpperCase()}
          </Badge>
        </div>
      </div>

      <div className="flex-1 p-6 space-y-6 overflow-auto">
        {/* Input Section */}
        <Card className="shadow-card">
          <CardHeader>
            <CardTitle className="text-lg">Input</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="relative">
              <Textarea
                ref={textareaRef}
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="Enter your request for the AI agent..."
                className="min-h-[120px] pr-12 resize-none bg-background border-border focus:ring-primary"
                disabled={currentStep !== 'idle'}
              />
              <Button
                onClick={handleSubmit}
                disabled={!input.trim() || !requestId || currentStep !== 'idle'}
                className="absolute bottom-2 right-2 h-8 w-8 p-0"
                size="sm"
              >
                <Send className="h-4 w-4" />
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Thinking Section */}
        {currentStep !== 'idle' && (
          <Collapsible open={isThinkingExpanded} onOpenChange={setIsThinkingExpanded}>
            <Card className="shadow-card">
              <CollapsibleTrigger asChild>
                <CardHeader className="cursor-pointer hover:bg-muted/50 transition-colors">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <Brain className="h-5 w-5 text-primary" />
                      <CardTitle className="text-lg">
                        {currentStep === 'thinking' ? 'Thinking...' : 'Processing Complete'}
                      </CardTitle>
                      {currentStep === 'thinking' && (
                        <div className="animate-thinking">‚óè</div>
                      )}
                    </div>
                    {isThinkingExpanded ? (
                      <ChevronDown className="h-4 w-4" />
                    ) : (
                      <ChevronRight className="h-4 w-4" />
                    )}
                  </div>
                </CardHeader>
              </CollapsibleTrigger>
              <CollapsibleContent>
                <CardContent>
                  <div className="text-sm text-muted-foreground">
                    {thinkingText || "AI agent is processing your request..."}
                  </div>
                </CardContent>
              </CollapsibleContent>
            </Card>
          </Collapsible>
        )}

        {/* Output Section */}
        {outputFile && currentStep === 'output-ready' && (
          <Card className="shadow-card">
            <CardHeader>
              <CardTitle className="text-lg flex items-center gap-2">
                <CheckCircle className="h-5 w-5 text-success" />
                Output Ready
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center gap-3 p-3 bg-muted/30 rounded-lg">
                <span className="font-mono text-sm">{outputFile.name}</span>
              </div>
              
              <div className="flex gap-3">
                <Button
                  variant="outline"
                  onClick={() => handlePreview(outputFile.content)}
                  className="flex items-center gap-2"
                >
                  <Eye className="h-4 w-4" />
                  Preview
                </Button>
                
                <Button
                  variant="outline"
                  onClick={() => handleDownload(outputFile.name, outputFile.content)}
                  className="flex items-center gap-2"
                >
                  <Download className="h-4 w-4" />
                  Download
                </Button>
                
                <Button
                  onClick={handleProceed}
                  className="flex items-center gap-2 bg-gradient-primary hover:opacity-90"
                >
                  <ArrowRight className="h-4 w-4" />
                  Proceed
                </Button>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Final Files Section */}
        {finalFiles && currentStep === 'complete' && (
          <Card className="shadow-card">
            <CardHeader>
              <CardTitle className="text-lg flex items-center gap-2">
                <CheckCircle className="h-5 w-5 text-success" />
                Final Output Files
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Text File */}
              <div className="space-y-2">
                <h4 className="font-medium">Text File</h4>
                <div className="flex items-center gap-3 p-3 bg-muted/30 rounded-lg">
                  <span className="font-mono text-sm">{finalFiles.textFile}</span>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleDownload(finalFiles.textFile, "Final text file content...")}
                    className="ml-auto"
                  >
                    <Download className="h-4 w-4" />
                  </Button>
                </div>
              </div>

              {/* Markdown File */}
              <div className="space-y-2">
                <h4 className="font-medium">Markdown File</h4>
                <div className="flex items-center gap-3 p-3 bg-muted/30 rounded-lg">
                  <span className="font-mono text-sm">{finalFiles.markdownFile.name}</span>
                  <div className="ml-auto flex gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handlePreview(finalFiles.markdownFile.content)}
                    >
                      <Eye className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleDownload(finalFiles.markdownFile.name, finalFiles.markdownFile.content)}
                    >
                      <Download className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </div>

              <Button
                onClick={resetWorkflow}
                variant="outline"
                className="w-full mt-4"
              >
                Start New Request
              </Button>
            </CardContent>
          </Card>
        )}

        {currentStep === 'processing-files' && (
          <Card className="shadow-card">
            <CardContent className="flex items-center justify-center py-8">
              <div className="text-center space-y-2">
                <div className="animate-spin h-8 w-8 border-2 border-primary border-t-transparent rounded-full mx-auto"></div>
                <p className="text-sm text-muted-foreground">Processing files...</p>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
};